from typing import List


def __levenshtein(a: List,
                  b: List) -> int:
    """Calculates the Levenshtein distance between a and b.
    """
    n, m = len(a), len(b)
    if n > m:
        # Make sure n <= m, to use O(min(n,m)) space
        a, b = b, a
        n, m = m, n

    current = list(range(n + 1))
    for i in range(1, m + 1):
        previous, current = current, [i] + [0] * n
        for j in range(1, n + 1):
            add, delete = previous[j] + 1, current[j - 1] + 1
            change = previous[j - 1]
            if a[j - 1] != b[i - 1]:
                change = change + 1
            current[j] = min(add, delete, change)

    return current[n]


def word_error_rate(hypotheses: List[str],
                    references: List[str],
                    use_cer=False) -> float:
    """
    Computes Average Word Error rate between two texts represented as
    corresponding lists of string. Hypotheses and references must have same length.

    Args:
        hypotheses: list of hypotheses
        references: list of references

    Returns:
        (float) average word error rate
    """
    cer_scores = 0
    cer_words = 0

    wer_scores = 0
    wer_words = 0

    len_diff = len(references) - len(hypotheses)
    if len_diff > 0:
        raise ValueError("In word error rate calculation, hypotheses and reference"
                         " lists must have the same number of elements. But I got:"
                         "{0} and {1} correspondingly".format(len(hypotheses), len(references)))
    elif len_diff < 0:
        hypotheses = hypotheses[:len_diff]

    for h, r in zip(hypotheses, references):
        # if use_cer:
        #     # h = h.replace(' ', '')
        #     # r = r.replace(' ', '')
        #     cer_h_list = list(h)
        #     cer_r_list = list(r)
        # else:
        #     wer_h_list = h.split()
        #     wer_r_list = r.split()

        cer_h_list = list(h)
        cer_r_list = list(r)

        wer_h_list = h.split()
        wer_r_list = r.split()

        wer_words += len(wer_r_list)
        wer_scores += __levenshtein(wer_h_list, wer_r_list)

        cer_words += len(cer_r_list)
        cer_scores += __levenshtein(cer_h_list, cer_r_list)

    if wer_words != 0 and cer_words !=0:
        wer = 1.0*wer_scores/wer_words
        cer = 1.0 * cer_scores / cer_words
    else:
        wer = float('inf')
        cer = float('inf')
    return cer, wer, cer_scores, cer_words, wer_scores, wer_words
